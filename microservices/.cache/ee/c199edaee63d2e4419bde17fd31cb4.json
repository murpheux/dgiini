{"id":"../node_modules/mongodb-core/lib/topologies/server.js","dependencies":[{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/package.json","includedInParent":true,"mtime":1563323962672},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/.babelrc","includedInParent":true,"mtime":1557029603000},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/package.json","includedInParent":true,"mtime":1561227911279},{"name":"util","loc":{"line":4,"column":14},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/.config/yarn/global/node_modules/node-libs-browser/node_modules/util/util.js"},{"name":"events","loc":{"line":5,"column":25},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/.config/yarn/global/node_modules/node-libs-browser/node_modules/events/events.js"},{"name":"./read_preference","loc":{"line":6,"column":27},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/read_preference.js"},{"name":"../connection/logger","loc":{"line":7,"column":19},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/connection/logger.js"},{"name":"../connection/utils","loc":{"line":9,"column":25},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/connection/utils.js"},{"name":"../connection/pool","loc":{"line":10,"column":17},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/connection/pool.js"},{"name":"../error","loc":{"line":12,"column":30},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/error.js"},{"name":"../wireprotocol","loc":{"line":13,"column":25},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/wireprotocol/index.js"},{"name":"../cursor","loc":{"line":14,"column":24},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/cursor.js"},{"name":"./shared","loc":{"line":19,"column":26},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/shared.js"},{"name":"../utils","loc":{"line":22,"column":38},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/server.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/utils.js"}],"generated":{"js":"'use strict';\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  ReadPreference = require('./read_preference'),\n  Logger = require('../connection/logger'),\n  debugOptions = require('../connection/utils').debugOptions,\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Pool = require('../connection/pool'),\n  MongoError = require('../error').MongoError,\n  MongoNetworkError = require('../error').MongoNetworkError,\n  wireProtocol = require('../wireprotocol'),\n  BasicCursor = require('../cursor'),\n  sdam = require('./shared'),\n  createClientInfo = require('./shared').createClientInfo,\n  createCompressionInfo = require('./shared').createCompressionInfo,\n  resolveClusterTime = require('./shared').resolveClusterTime,\n  SessionMixins = require('./shared').SessionMixins,\n  relayEvents = require('../utils').relayEvents;\n\nconst collationNotSupported = require('../utils').collationNotSupported;\n\n// Used for filtering out fields for loggin\nvar debugFields = [\n  'reconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'emitError',\n  'cursorFactory',\n  'host',\n  'port',\n  'size',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectionTimeout',\n  'checkServerIdentity',\n  'socketTimeout',\n  'ssl',\n  'ca',\n  'crl',\n  'cert',\n  'key',\n  'rejectUnauthorized',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'servername'\n];\n\n// Server instance id\nvar id = 0;\nvar serverAccounting = false;\nvar servers = {};\nvar BSON = retrieveBSON();\n\n/**\n * Creates a new Server instance\n * @class\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {number} [options.monitoring=true] Enable the server state monitoring (calling ismaster at monitoringInterval)\n * @param {number} [options.monitoringInterval=5000] The interval of calling ismaster when monitoring is enabled.\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=300000] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=360000] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {string} [options.appname=null] Application name, passed in on ismaster call and logged in mongod server logs. Maximum size 128 bytes.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Server} A cursor instance\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @fires Server#reconnectFailed\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n * @fires Server#topologyOpening\n * @fires Server#topologyClosed\n * @fires Server#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Server = function(options) {\n  options = options || {};\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Server instance id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    // Options\n    options: options,\n    // Logger\n    logger: Logger('Server', options),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Pool\n    pool: null,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Monitor thread (keeps the connection alive)\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : true,\n    // Is the server in a topology\n    inTopology: !!options.parent,\n    // Monitoring timeout\n    monitoringInterval:\n      typeof options.monitoringInterval === 'number' ? options.monitoringInterval : 5000,\n    // Topology id\n    topologyId: -1,\n    compression: { compressors: createCompressionInfo(options) },\n    // Optional parent topology\n    parent: options.parent\n  };\n\n  // If this is a single deployment we need to track the clusterTime here\n  if (!this.s.parent) {\n    this.s.clusterTime = null;\n  }\n\n  // Curent ismaster\n  this.ismaster = null;\n  // Current ping time\n  this.lastIsMasterMS = -1;\n  // The monitoringProcessId\n  this.monitoringProcessId = null;\n  // Initial connection\n  this.initialConnect = true;\n  // Default type\n  this._type = 'server';\n  // Set the client info\n  this.clientInfo = createClientInfo(options);\n\n  // Max Stalleness values\n  // last time we updated the ismaster state\n  this.lastUpdateTime = 0;\n  // Last write time\n  this.lastWriteDate = 0;\n  // Stalleness\n  this.staleness = 0;\n};\n\ninherits(Server, EventEmitter);\nObject.assign(Server.prototype, SessionMixins);\n\nObject.defineProperty(Server.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return this._type;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(Server.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n// In single server deployments we track the clusterTime directly on the topology, however\n// in Mongos and ReplSet deployments we instead need to delegate the clusterTime up to the\n// tracking objects so we can ensure we are gossiping the maximum time received from the\n// server.\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  enumerable: true,\n  set: function(clusterTime) {\n    const settings = this.s.parent ? this.s.parent : this.s;\n    resolveClusterTime(settings, clusterTime);\n  },\n  get: function() {\n    const settings = this.s.parent ? this.s.parent : this.s;\n    return settings.clusterTime || null;\n  }\n});\n\nServer.enableServerAccounting = function() {\n  serverAccounting = true;\n  servers = {};\n};\n\nServer.disableServerAccounting = function() {\n  serverAccounting = false;\n};\n\nServer.servers = function() {\n  return servers;\n};\n\nObject.defineProperty(Server.prototype, 'name', {\n  enumerable: true,\n  get: function() {\n    return this.s.options.host + ':' + this.s.options.port;\n  }\n});\n\nfunction disconnectHandler(self, type, ns, cmd, options, callback) {\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if (\n    !self.s.pool.isConnected() &&\n    self.s.options.reconnect &&\n    self.s.disconnectHandler != null &&\n    !options.monitoring\n  ) {\n    self.s.disconnectHandler.add(type, ns, cmd, options, callback);\n    return true;\n  }\n\n  // If we have no connection error\n  if (!self.s.pool.isConnected()) {\n    callback(new MongoError(f('no connection available to server %s', self.name)));\n    return true;\n  }\n}\n\nfunction monitoringProcess(self) {\n  return function() {\n    // Pool was destroyed do not continue process\n    if (self.s.pool.isDestroyed()) return;\n    // Emit monitoring Process event\n    self.emit('monitoring', self);\n    // Perform ismaster call\n    // Get start time\n    var start = new Date().getTime();\n\n    // Execute the ismaster query\n    self.command(\n      'admin.$cmd',\n      { ismaster: true },\n      {\n        socketTimeout:\n          typeof self.s.options.connectionTimeout !== 'number'\n            ? 2000\n            : self.s.options.connectionTimeout,\n        monitoring: true\n      },\n      (err, result) => {\n        // Set initial lastIsMasterMS\n        self.lastIsMasterMS = new Date().getTime() - start;\n        if (self.s.pool.isDestroyed()) return;\n        // Update the ismaster view if we have a result\n        if (result) {\n          self.ismaster = result.result;\n        }\n        // Re-schedule the monitoring process\n        self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n      }\n    );\n  };\n}\n\nvar eventHandler = function(self, event) {\n  return function(err, conn) {\n    // Log information of received information if in info mode\n    if (self.s.logger.isInfo()) {\n      var object = err instanceof MongoError ? JSON.stringify(err) : {};\n      self.s.logger.info(\n        f('server %s fired event %s out with message %s', self.name, event, object)\n      );\n    }\n\n    // Handle connect event\n    if (event === 'connect') {\n      self.initialConnect = false;\n      self.ismaster = conn.ismaster;\n      self.lastIsMasterMS = conn.lastIsMasterMS;\n      if (conn.agreedCompressor) {\n        self.s.pool.options.agreedCompressor = conn.agreedCompressor;\n      }\n\n      if (conn.zlibCompressionLevel) {\n        self.s.pool.options.zlibCompressionLevel = conn.zlibCompressionLevel;\n      }\n\n      if (conn.ismaster.$clusterTime) {\n        const $clusterTime = conn.ismaster.$clusterTime;\n        self.clusterTime = $clusterTime;\n      }\n\n      // It's a proxy change the type so\n      // the wireprotocol will send $readPreference\n      if (self.ismaster.msg === 'isdbgrid') {\n        self._type = 'mongos';\n      }\n\n      // Have we defined self monitoring\n      if (self.s.monitoring) {\n        self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n      }\n\n      // Emit server description changed if something listening\n      sdam.emitServerDescriptionChanged(self, {\n        address: self.name,\n        arbiters: [],\n        hosts: [],\n        passives: [],\n        type: sdam.getTopologyType(self)\n      });\n\n      if (!self.s.inTopology) {\n        // Emit topology description changed if something listening\n        sdam.emitTopologyDescriptionChanged(self, {\n          topologyType: 'Single',\n          servers: [\n            {\n              address: self.name,\n              arbiters: [],\n              hosts: [],\n              passives: [],\n              type: sdam.getTopologyType(self)\n            }\n          ]\n        });\n      }\n\n      // Log the ismaster if available\n      if (self.s.logger.isInfo()) {\n        self.s.logger.info(\n          f('server %s connected with ismaster [%s]', self.name, JSON.stringify(self.ismaster))\n        );\n      }\n\n      // Emit connect\n      self.emit('connect', self);\n    } else if (\n      event === 'error' ||\n      event === 'parseError' ||\n      event === 'close' ||\n      event === 'timeout' ||\n      event === 'reconnect' ||\n      event === 'attemptReconnect' ||\n      'reconnectFailed'\n    ) {\n      // Remove server instance from accounting\n      if (\n        serverAccounting &&\n        ['close', 'timeout', 'error', 'parseError', 'reconnectFailed'].indexOf(event) !== -1\n      ) {\n        // Emit toplogy opening event if not in topology\n        if (!self.s.inTopology) {\n          self.emit('topologyOpening', { topologyId: self.id });\n        }\n\n        delete servers[self.id];\n      }\n\n      if (event === 'close') {\n        // Closing emits a server description changed event going to unknown.\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: 'Unknown'\n        });\n      }\n\n      // Reconnect failed return error\n      if (event === 'reconnectFailed') {\n        self.emit('reconnectFailed', err);\n        // Emit error if any listeners\n        if (self.listeners('error').length > 0) {\n          self.emit('error', err);\n        }\n        // Terminate\n        return;\n      }\n\n      // On first connect fail\n      if (\n        ['disconnected', 'connecting'].indexOf(self.s.pool.state) !== -1 &&\n        self.initialConnect &&\n        ['close', 'timeout', 'error', 'parseError'].indexOf(event) !== -1\n      ) {\n        self.initialConnect = false;\n        return self.emit(\n          'error',\n          new MongoNetworkError(\n            f('failed to connect to server [%s] on first connect [%s]', self.name, err)\n          )\n        );\n      }\n\n      // Reconnect event, emit the server\n      if (event === 'reconnect') {\n        // Reconnecting emits a server description changed event going from unknown to the\n        // current server type.\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: sdam.getTopologyType(self)\n        });\n        return self.emit(event, self);\n      }\n\n      // Emit the event\n      self.emit(event, err);\n    }\n  };\n};\n\n/**\n * Initiate server connect\n */\nServer.prototype.connect = function(options) {\n  var self = this;\n  options = options || {};\n\n  // Set the connections\n  if (serverAccounting) servers[this.id] = this;\n\n  // Do not allow connect to be called on anything that's not disconnected\n  if (self.s.pool && !self.s.pool.isDisconnected() && !self.s.pool.isDestroyed()) {\n    throw new MongoError(f('server instance in invalid state %s', self.s.pool.state));\n  }\n\n  // Create a pool\n  self.s.pool = new Pool(this, Object.assign(self.s.options, options, { bson: this.s.bson }));\n\n  // Set up listeners\n  self.s.pool.on('close', eventHandler(self, 'close'));\n  self.s.pool.on('error', eventHandler(self, 'error'));\n  self.s.pool.on('timeout', eventHandler(self, 'timeout'));\n  self.s.pool.on('parseError', eventHandler(self, 'parseError'));\n  self.s.pool.on('connect', eventHandler(self, 'connect'));\n  self.s.pool.on('reconnect', eventHandler(self, 'reconnect'));\n  self.s.pool.on('reconnectFailed', eventHandler(self, 'reconnectFailed'));\n\n  // Set up listeners for command monitoring\n  relayEvents(self.s.pool, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n  // Emit toplogy opening event if not in topology\n  if (!self.s.inTopology) {\n    this.emit('topologyOpening', { topologyId: self.id });\n  }\n\n  // Emit opening server event\n  self.emit('serverOpening', {\n    topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n    address: self.name\n  });\n\n  self.s.pool.connect();\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\n/**\n * Get the server description\n * @method\n * @return {object}\n */\nServer.prototype.getDescription = function() {\n  var ismaster = this.ismaster || {};\n  var description = {\n    type: sdam.getTopologyType(this),\n    address: this.name\n  };\n\n  // Add fields if available\n  if (ismaster.hosts) description.hosts = ismaster.hosts;\n  if (ismaster.arbiters) description.arbiters = ismaster.arbiters;\n  if (ismaster.passives) description.passives = ismaster.passives;\n  if (ismaster.setName) description.setName = ismaster.setName;\n  return description;\n};\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nServer.prototype.lastIsMaster = function() {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nServer.prototype.unref = function() {\n  this.s.pool.unref();\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nServer.prototype.isConnected = function() {\n  if (!this.s.pool) return false;\n  return this.s.pool.isConnected();\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nServer.prototype.isDestroyed = function() {\n  if (!this.s.pool) return false;\n  return this.s.pool.isDestroyed();\n};\n\nfunction basicWriteValidations(self) {\n  if (!self.s.pool) return new MongoError('server instance is not connected');\n  if (self.s.pool.isDestroyed()) return new MongoError('server instance pool was destroyed');\n}\n\nfunction basicReadValidations(self, options) {\n  basicWriteValidations(self, options);\n\n  if (options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    throw new Error('readPreference must be an instance of ReadPreference');\n  }\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.command = function(ns, cmd, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicReadValidations(self, options);\n  if (result) return callback(result);\n\n  // Clone the options\n  options = Object.assign({}, options, { wireProtocolCommand: false });\n\n  // Debug log\n  if (self.s.logger.isDebug())\n    self.s.logger.debug(\n      f(\n        'executing command [%s] against %s',\n        JSON.stringify({\n          ns: ns,\n          cmd: cmd,\n          options: debugOptions(debugFields, options)\n        }),\n        self.name\n      )\n    );\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'command', ns, cmd, options, callback)) return;\n\n  // error if collation not supported\n  if (collationNotSupported(this, cmd)) {\n    return callback(new MongoError(`server ${this.name} does not support collation`));\n  }\n\n  wireProtocol.command(self, ns, cmd, options, callback);\n};\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.insert = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'insert', ns, ops, options, callback)) return;\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n\n  // Execute write\n  return wireProtocol.insert(self, ns, ops, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.update = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'update', ns, ops, options, callback)) return;\n\n  // error if collation not supported\n  if (collationNotSupported(this, options)) {\n    return callback(new MongoError(`server ${this.name} does not support collation`));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return wireProtocol.update(self, ns, ops, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.remove = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'remove', ns, ops, options, callback)) return;\n\n  // error if collation not supported\n  if (collationNotSupported(this, options)) {\n    return callback(new MongoError(`server ${this.name} does not support collation`));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return wireProtocol.remove(self, ns, ops, options, callback);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nServer.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(this.s.bson, ns, cmd, options, topology, this.s.options);\n};\n\n/**\n * Compare two server instances\n * @method\n * @param {Server} server Server to compare equality against\n * @return {boolean}\n */\nServer.prototype.equals = function(server) {\n  if (typeof server === 'string') return this.name.toLowerCase() === server.toLowerCase();\n  if (server.name) return this.name.toLowerCase() === server.name.toLowerCase();\n  return false;\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nServer.prototype.connections = function() {\n  return this.s.pool.allConnections();\n};\n\n/**\n * Selects a server\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Unused\n * @return {Server}\n */\nServer.prototype.selectServer = function(selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined')\n    (callback = selector), (selector = undefined), (options = {});\n  if (typeof options === 'function')\n    (callback = options), (options = selector), (selector = undefined);\n\n  callback(null, this);\n};\n\nvar listeners = ['close', 'error', 'timeout', 'parseError', 'connect'];\n\n/**\n * Destroy the server connection\n * @method\n * @param {boolean} [options.emitClose=false] Emit close event on destroy\n * @param {boolean} [options.emitDestroy=false] Emit destroy event on destroy\n * @param {boolean} [options.force=false] Force destroy the pool\n */\nServer.prototype.destroy = function(options, callback) {\n  if (this._destroyed) {\n    if (typeof callback === 'function') callback(null, null);\n    return;\n  }\n\n  options = options || {};\n  var self = this;\n\n  // Set the connections\n  if (serverAccounting) delete servers[this.id];\n\n  // Destroy the monitoring process if any\n  if (this.monitoringProcessId) {\n    clearTimeout(this.monitoringProcessId);\n  }\n\n  // No pool, return\n  if (!self.s.pool) {\n    this._destroyed = true;\n    if (typeof callback === 'function') callback(null, null);\n    return;\n  }\n\n  // Emit close event\n  if (options.emitClose) {\n    self.emit('close', self);\n  }\n\n  // Emit destroy event\n  if (options.emitDestroy) {\n    self.emit('destroy', self);\n  }\n\n  // Remove all listeners\n  listeners.forEach(function(event) {\n    self.s.pool.removeAllListeners(event);\n  });\n\n  // Emit opening server event\n  if (self.listeners('serverClosed').length > 0)\n    self.emit('serverClosed', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name\n    });\n\n  // Emit toplogy opening event if not in topology\n  if (self.listeners('topologyClosed').length > 0 && !self.s.inTopology) {\n    self.emit('topologyClosed', { topologyId: self.id });\n  }\n\n  if (self.s.logger.isDebug()) {\n    self.s.logger.debug(f('destroy called on server %s', self.name));\n  }\n\n  // Destroy the pool\n  this.s.pool.destroy(options.force, callback);\n  this._destroyed = true;\n};\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Server#connect\n * @type {Server}\n */\n\n/**\n * A server reconnect event, used to verify that the server topology has reconnected\n *\n * @event Server#reconnect\n * @type {Server}\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Server#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Server#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Server#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Server#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Server#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Server#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * Server reconnect failed\n *\n * @event Server#reconnectFailed\n * @type {Error}\n */\n\n/**\n * Server connection pool closed\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server connection pool caused an error\n *\n * @event Server#error\n * @type {Error}\n */\n\n/**\n * Server destroyed was called\n *\n * @event Server#destroy\n * @type {Server}\n */\n\nmodule.exports = Server;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/mongodb-core/lib/topologies/server.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}}],"sources":{"../node_modules/mongodb-core/lib/topologies/server.js":"'use strict';\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  ReadPreference = require('./read_preference'),\n  Logger = require('../connection/logger'),\n  debugOptions = require('../connection/utils').debugOptions,\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Pool = require('../connection/pool'),\n  MongoError = require('../error').MongoError,\n  MongoNetworkError = require('../error').MongoNetworkError,\n  wireProtocol = require('../wireprotocol'),\n  BasicCursor = require('../cursor'),\n  sdam = require('./shared'),\n  createClientInfo = require('./shared').createClientInfo,\n  createCompressionInfo = require('./shared').createCompressionInfo,\n  resolveClusterTime = require('./shared').resolveClusterTime,\n  SessionMixins = require('./shared').SessionMixins,\n  relayEvents = require('../utils').relayEvents;\n\nconst collationNotSupported = require('../utils').collationNotSupported;\n\n// Used for filtering out fields for loggin\nvar debugFields = [\n  'reconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'emitError',\n  'cursorFactory',\n  'host',\n  'port',\n  'size',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectionTimeout',\n  'checkServerIdentity',\n  'socketTimeout',\n  'ssl',\n  'ca',\n  'crl',\n  'cert',\n  'key',\n  'rejectUnauthorized',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'servername'\n];\n\n// Server instance id\nvar id = 0;\nvar serverAccounting = false;\nvar servers = {};\nvar BSON = retrieveBSON();\n\n/**\n * Creates a new Server instance\n * @class\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {number} [options.monitoring=true] Enable the server state monitoring (calling ismaster at monitoringInterval)\n * @param {number} [options.monitoringInterval=5000] The interval of calling ismaster when monitoring is enabled.\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=300000] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=360000] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {string} [options.appname=null] Application name, passed in on ismaster call and logged in mongod server logs. Maximum size 128 bytes.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Server} A cursor instance\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @fires Server#reconnectFailed\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n * @fires Server#topologyOpening\n * @fires Server#topologyClosed\n * @fires Server#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Server = function(options) {\n  options = options || {};\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Server instance id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    // Options\n    options: options,\n    // Logger\n    logger: Logger('Server', options),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Pool\n    pool: null,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Monitor thread (keeps the connection alive)\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : true,\n    // Is the server in a topology\n    inTopology: !!options.parent,\n    // Monitoring timeout\n    monitoringInterval:\n      typeof options.monitoringInterval === 'number' ? options.monitoringInterval : 5000,\n    // Topology id\n    topologyId: -1,\n    compression: { compressors: createCompressionInfo(options) },\n    // Optional parent topology\n    parent: options.parent\n  };\n\n  // If this is a single deployment we need to track the clusterTime here\n  if (!this.s.parent) {\n    this.s.clusterTime = null;\n  }\n\n  // Curent ismaster\n  this.ismaster = null;\n  // Current ping time\n  this.lastIsMasterMS = -1;\n  // The monitoringProcessId\n  this.monitoringProcessId = null;\n  // Initial connection\n  this.initialConnect = true;\n  // Default type\n  this._type = 'server';\n  // Set the client info\n  this.clientInfo = createClientInfo(options);\n\n  // Max Stalleness values\n  // last time we updated the ismaster state\n  this.lastUpdateTime = 0;\n  // Last write time\n  this.lastWriteDate = 0;\n  // Stalleness\n  this.staleness = 0;\n};\n\ninherits(Server, EventEmitter);\nObject.assign(Server.prototype, SessionMixins);\n\nObject.defineProperty(Server.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return this._type;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(Server.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n// In single server deployments we track the clusterTime directly on the topology, however\n// in Mongos and ReplSet deployments we instead need to delegate the clusterTime up to the\n// tracking objects so we can ensure we are gossiping the maximum time received from the\n// server.\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  enumerable: true,\n  set: function(clusterTime) {\n    const settings = this.s.parent ? this.s.parent : this.s;\n    resolveClusterTime(settings, clusterTime);\n  },\n  get: function() {\n    const settings = this.s.parent ? this.s.parent : this.s;\n    return settings.clusterTime || null;\n  }\n});\n\nServer.enableServerAccounting = function() {\n  serverAccounting = true;\n  servers = {};\n};\n\nServer.disableServerAccounting = function() {\n  serverAccounting = false;\n};\n\nServer.servers = function() {\n  return servers;\n};\n\nObject.defineProperty(Server.prototype, 'name', {\n  enumerable: true,\n  get: function() {\n    return this.s.options.host + ':' + this.s.options.port;\n  }\n});\n\nfunction disconnectHandler(self, type, ns, cmd, options, callback) {\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if (\n    !self.s.pool.isConnected() &&\n    self.s.options.reconnect &&\n    self.s.disconnectHandler != null &&\n    !options.monitoring\n  ) {\n    self.s.disconnectHandler.add(type, ns, cmd, options, callback);\n    return true;\n  }\n\n  // If we have no connection error\n  if (!self.s.pool.isConnected()) {\n    callback(new MongoError(f('no connection available to server %s', self.name)));\n    return true;\n  }\n}\n\nfunction monitoringProcess(self) {\n  return function() {\n    // Pool was destroyed do not continue process\n    if (self.s.pool.isDestroyed()) return;\n    // Emit monitoring Process event\n    self.emit('monitoring', self);\n    // Perform ismaster call\n    // Get start time\n    var start = new Date().getTime();\n\n    // Execute the ismaster query\n    self.command(\n      'admin.$cmd',\n      { ismaster: true },\n      {\n        socketTimeout:\n          typeof self.s.options.connectionTimeout !== 'number'\n            ? 2000\n            : self.s.options.connectionTimeout,\n        monitoring: true\n      },\n      (err, result) => {\n        // Set initial lastIsMasterMS\n        self.lastIsMasterMS = new Date().getTime() - start;\n        if (self.s.pool.isDestroyed()) return;\n        // Update the ismaster view if we have a result\n        if (result) {\n          self.ismaster = result.result;\n        }\n        // Re-schedule the monitoring process\n        self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n      }\n    );\n  };\n}\n\nvar eventHandler = function(self, event) {\n  return function(err, conn) {\n    // Log information of received information if in info mode\n    if (self.s.logger.isInfo()) {\n      var object = err instanceof MongoError ? JSON.stringify(err) : {};\n      self.s.logger.info(\n        f('server %s fired event %s out with message %s', self.name, event, object)\n      );\n    }\n\n    // Handle connect event\n    if (event === 'connect') {\n      self.initialConnect = false;\n      self.ismaster = conn.ismaster;\n      self.lastIsMasterMS = conn.lastIsMasterMS;\n      if (conn.agreedCompressor) {\n        self.s.pool.options.agreedCompressor = conn.agreedCompressor;\n      }\n\n      if (conn.zlibCompressionLevel) {\n        self.s.pool.options.zlibCompressionLevel = conn.zlibCompressionLevel;\n      }\n\n      if (conn.ismaster.$clusterTime) {\n        const $clusterTime = conn.ismaster.$clusterTime;\n        self.clusterTime = $clusterTime;\n      }\n\n      // It's a proxy change the type so\n      // the wireprotocol will send $readPreference\n      if (self.ismaster.msg === 'isdbgrid') {\n        self._type = 'mongos';\n      }\n\n      // Have we defined self monitoring\n      if (self.s.monitoring) {\n        self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n      }\n\n      // Emit server description changed if something listening\n      sdam.emitServerDescriptionChanged(self, {\n        address: self.name,\n        arbiters: [],\n        hosts: [],\n        passives: [],\n        type: sdam.getTopologyType(self)\n      });\n\n      if (!self.s.inTopology) {\n        // Emit topology description changed if something listening\n        sdam.emitTopologyDescriptionChanged(self, {\n          topologyType: 'Single',\n          servers: [\n            {\n              address: self.name,\n              arbiters: [],\n              hosts: [],\n              passives: [],\n              type: sdam.getTopologyType(self)\n            }\n          ]\n        });\n      }\n\n      // Log the ismaster if available\n      if (self.s.logger.isInfo()) {\n        self.s.logger.info(\n          f('server %s connected with ismaster [%s]', self.name, JSON.stringify(self.ismaster))\n        );\n      }\n\n      // Emit connect\n      self.emit('connect', self);\n    } else if (\n      event === 'error' ||\n      event === 'parseError' ||\n      event === 'close' ||\n      event === 'timeout' ||\n      event === 'reconnect' ||\n      event === 'attemptReconnect' ||\n      'reconnectFailed'\n    ) {\n      // Remove server instance from accounting\n      if (\n        serverAccounting &&\n        ['close', 'timeout', 'error', 'parseError', 'reconnectFailed'].indexOf(event) !== -1\n      ) {\n        // Emit toplogy opening event if not in topology\n        if (!self.s.inTopology) {\n          self.emit('topologyOpening', { topologyId: self.id });\n        }\n\n        delete servers[self.id];\n      }\n\n      if (event === 'close') {\n        // Closing emits a server description changed event going to unknown.\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: 'Unknown'\n        });\n      }\n\n      // Reconnect failed return error\n      if (event === 'reconnectFailed') {\n        self.emit('reconnectFailed', err);\n        // Emit error if any listeners\n        if (self.listeners('error').length > 0) {\n          self.emit('error', err);\n        }\n        // Terminate\n        return;\n      }\n\n      // On first connect fail\n      if (\n        ['disconnected', 'connecting'].indexOf(self.s.pool.state) !== -1 &&\n        self.initialConnect &&\n        ['close', 'timeout', 'error', 'parseError'].indexOf(event) !== -1\n      ) {\n        self.initialConnect = false;\n        return self.emit(\n          'error',\n          new MongoNetworkError(\n            f('failed to connect to server [%s] on first connect [%s]', self.name, err)\n          )\n        );\n      }\n\n      // Reconnect event, emit the server\n      if (event === 'reconnect') {\n        // Reconnecting emits a server description changed event going from unknown to the\n        // current server type.\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: sdam.getTopologyType(self)\n        });\n        return self.emit(event, self);\n      }\n\n      // Emit the event\n      self.emit(event, err);\n    }\n  };\n};\n\n/**\n * Initiate server connect\n */\nServer.prototype.connect = function(options) {\n  var self = this;\n  options = options || {};\n\n  // Set the connections\n  if (serverAccounting) servers[this.id] = this;\n\n  // Do not allow connect to be called on anything that's not disconnected\n  if (self.s.pool && !self.s.pool.isDisconnected() && !self.s.pool.isDestroyed()) {\n    throw new MongoError(f('server instance in invalid state %s', self.s.pool.state));\n  }\n\n  // Create a pool\n  self.s.pool = new Pool(this, Object.assign(self.s.options, options, { bson: this.s.bson }));\n\n  // Set up listeners\n  self.s.pool.on('close', eventHandler(self, 'close'));\n  self.s.pool.on('error', eventHandler(self, 'error'));\n  self.s.pool.on('timeout', eventHandler(self, 'timeout'));\n  self.s.pool.on('parseError', eventHandler(self, 'parseError'));\n  self.s.pool.on('connect', eventHandler(self, 'connect'));\n  self.s.pool.on('reconnect', eventHandler(self, 'reconnect'));\n  self.s.pool.on('reconnectFailed', eventHandler(self, 'reconnectFailed'));\n\n  // Set up listeners for command monitoring\n  relayEvents(self.s.pool, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n  // Emit toplogy opening event if not in topology\n  if (!self.s.inTopology) {\n    this.emit('topologyOpening', { topologyId: self.id });\n  }\n\n  // Emit opening server event\n  self.emit('serverOpening', {\n    topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n    address: self.name\n  });\n\n  self.s.pool.connect();\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\n/**\n * Get the server description\n * @method\n * @return {object}\n */\nServer.prototype.getDescription = function() {\n  var ismaster = this.ismaster || {};\n  var description = {\n    type: sdam.getTopologyType(this),\n    address: this.name\n  };\n\n  // Add fields if available\n  if (ismaster.hosts) description.hosts = ismaster.hosts;\n  if (ismaster.arbiters) description.arbiters = ismaster.arbiters;\n  if (ismaster.passives) description.passives = ismaster.passives;\n  if (ismaster.setName) description.setName = ismaster.setName;\n  return description;\n};\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nServer.prototype.lastIsMaster = function() {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nServer.prototype.unref = function() {\n  this.s.pool.unref();\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nServer.prototype.isConnected = function() {\n  if (!this.s.pool) return false;\n  return this.s.pool.isConnected();\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nServer.prototype.isDestroyed = function() {\n  if (!this.s.pool) return false;\n  return this.s.pool.isDestroyed();\n};\n\nfunction basicWriteValidations(self) {\n  if (!self.s.pool) return new MongoError('server instance is not connected');\n  if (self.s.pool.isDestroyed()) return new MongoError('server instance pool was destroyed');\n}\n\nfunction basicReadValidations(self, options) {\n  basicWriteValidations(self, options);\n\n  if (options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    throw new Error('readPreference must be an instance of ReadPreference');\n  }\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.command = function(ns, cmd, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicReadValidations(self, options);\n  if (result) return callback(result);\n\n  // Clone the options\n  options = Object.assign({}, options, { wireProtocolCommand: false });\n\n  // Debug log\n  if (self.s.logger.isDebug())\n    self.s.logger.debug(\n      f(\n        'executing command [%s] against %s',\n        JSON.stringify({\n          ns: ns,\n          cmd: cmd,\n          options: debugOptions(debugFields, options)\n        }),\n        self.name\n      )\n    );\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'command', ns, cmd, options, callback)) return;\n\n  // error if collation not supported\n  if (collationNotSupported(this, cmd)) {\n    return callback(new MongoError(`server ${this.name} does not support collation`));\n  }\n\n  wireProtocol.command(self, ns, cmd, options, callback);\n};\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.insert = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'insert', ns, ops, options, callback)) return;\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n\n  // Execute write\n  return wireProtocol.insert(self, ns, ops, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.update = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'update', ns, ops, options, callback)) return;\n\n  // error if collation not supported\n  if (collationNotSupported(this, options)) {\n    return callback(new MongoError(`server ${this.name} does not support collation`));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return wireProtocol.update(self, ns, ops, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.remove = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'remove', ns, ops, options, callback)) return;\n\n  // error if collation not supported\n  if (collationNotSupported(this, options)) {\n    return callback(new MongoError(`server ${this.name} does not support collation`));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return wireProtocol.remove(self, ns, ops, options, callback);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nServer.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(this.s.bson, ns, cmd, options, topology, this.s.options);\n};\n\n/**\n * Compare two server instances\n * @method\n * @param {Server} server Server to compare equality against\n * @return {boolean}\n */\nServer.prototype.equals = function(server) {\n  if (typeof server === 'string') return this.name.toLowerCase() === server.toLowerCase();\n  if (server.name) return this.name.toLowerCase() === server.name.toLowerCase();\n  return false;\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nServer.prototype.connections = function() {\n  return this.s.pool.allConnections();\n};\n\n/**\n * Selects a server\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Unused\n * @return {Server}\n */\nServer.prototype.selectServer = function(selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined')\n    (callback = selector), (selector = undefined), (options = {});\n  if (typeof options === 'function')\n    (callback = options), (options = selector), (selector = undefined);\n\n  callback(null, this);\n};\n\nvar listeners = ['close', 'error', 'timeout', 'parseError', 'connect'];\n\n/**\n * Destroy the server connection\n * @method\n * @param {boolean} [options.emitClose=false] Emit close event on destroy\n * @param {boolean} [options.emitDestroy=false] Emit destroy event on destroy\n * @param {boolean} [options.force=false] Force destroy the pool\n */\nServer.prototype.destroy = function(options, callback) {\n  if (this._destroyed) {\n    if (typeof callback === 'function') callback(null, null);\n    return;\n  }\n\n  options = options || {};\n  var self = this;\n\n  // Set the connections\n  if (serverAccounting) delete servers[this.id];\n\n  // Destroy the monitoring process if any\n  if (this.monitoringProcessId) {\n    clearTimeout(this.monitoringProcessId);\n  }\n\n  // No pool, return\n  if (!self.s.pool) {\n    this._destroyed = true;\n    if (typeof callback === 'function') callback(null, null);\n    return;\n  }\n\n  // Emit close event\n  if (options.emitClose) {\n    self.emit('close', self);\n  }\n\n  // Emit destroy event\n  if (options.emitDestroy) {\n    self.emit('destroy', self);\n  }\n\n  // Remove all listeners\n  listeners.forEach(function(event) {\n    self.s.pool.removeAllListeners(event);\n  });\n\n  // Emit opening server event\n  if (self.listeners('serverClosed').length > 0)\n    self.emit('serverClosed', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name\n    });\n\n  // Emit toplogy opening event if not in topology\n  if (self.listeners('topologyClosed').length > 0 && !self.s.inTopology) {\n    self.emit('topologyClosed', { topologyId: self.id });\n  }\n\n  if (self.s.logger.isDebug()) {\n    self.s.logger.debug(f('destroy called on server %s', self.name));\n  }\n\n  // Destroy the pool\n  this.s.pool.destroy(options.force, callback);\n  this._destroyed = true;\n};\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Server#connect\n * @type {Server}\n */\n\n/**\n * A server reconnect event, used to verify that the server topology has reconnected\n *\n * @event Server#reconnect\n * @type {Server}\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Server#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Server#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Server#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Server#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Server#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Server#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * Server reconnect failed\n *\n * @event Server#reconnectFailed\n * @type {Error}\n */\n\n/**\n * Server connection pool closed\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server connection pool caused an error\n *\n * @event Server#error\n * @type {Error}\n */\n\n/**\n * Server destroyed was called\n *\n * @event Server#destroy\n * @type {Server}\n */\n\nmodule.exports = Server;\n"},"lineCount":950}},"error":null,"hash":"a0ab40cbcbe70e8b3c62d147b6e8ad15","cacheData":{"env":{}}}