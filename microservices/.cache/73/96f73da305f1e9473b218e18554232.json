{"id":"../node_modules/logform/dist/splat.js","dependencies":[{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/package.json","includedInParent":true,"mtime":1563323962672},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/.babelrc","includedInParent":true,"mtime":1557029603000},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/logform/package.json","includedInParent":true,"mtime":1561510407437},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/logform/.babelrc","includedInParent":true,"mtime":1561510407437},{"name":"util","loc":{"line":17,"column":19},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/logform/dist/splat.js","resolved":"/Users/murpheux/.config/yarn/global/node_modules/node-libs-browser/node_modules/util/util.js"},{"name":"triple-beam","loc":{"line":19,"column":23},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/logform/dist/splat.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/triple-beam/index.js"}],"generated":{"js":"'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar util = require('util');\n\nvar _require = require('triple-beam'),\n    SPLAT = _require.SPLAT;\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\n\n\nvar formatRegExp = /%[scdjifoO%]/g;\n/**\n * Captures the number of escaped % signs in a format string (i.e. %s strings).\n * @type {RegExp}\n */\n\nvar escapedPercent = /%%/g;\n\nvar Splatter =\n/*#__PURE__*/\nfunction () {\n  function Splatter(opts) {\n    _classCallCheck(this, Splatter);\n\n    this.options = opts;\n  }\n  /**\n     * Check to see if tokens <= splat.length, assign { splat, meta } into the\n     * `info` accordingly, and write to this instance.\n     *\n     * @param  {Info} info Logform info message.\n     * @param  {String[]} tokens Set of string interpolation tokens.\n     * @returns {Info} Modified info message\n     * @private\n     */\n\n\n  _createClass(Splatter, [{\n    key: \"_splat\",\n    value: function _splat(info, tokens) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat || [];\n      var percents = msg.match(escapedPercent);\n      var escapes = percents && percents.length || 0; // The expected splat is the number of tokens minus the number of escapes\n      // e.g.\n      // - { expectedSplat: 3 } '%d %s %j'\n      // - { expectedSplat: 5 } '[%s] %d%% %d%% %s %j'\n      //\n      // Any \"meta\" will be arugments in addition to the expected splat size\n      // regardless of type. e.g.\n      //\n      // logger.log('info', '%d%% %s %j', 100, 'wow', { such: 'js' }, { thisIsMeta: true });\n      // would result in splat of four (4), but only three (3) are expected. Therefore:\n      //\n      // extraSplat = 3 - 4 = -1\n      // metas = [100, 'wow', { such: 'js' }, { thisIsMeta: true }].splice(-1, -1 * -1);\n      // splat = [100, 'wow', { such: 'js' }]\n\n      var expectedSplat = tokens.length - escapes;\n      var extraSplat = expectedSplat - splat.length;\n      var metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : []; // Now that { splat } has been separated from any potential { meta }. we\n      // can assign this to the `info` object and write it to our format stream.\n      // If the additional metas are **NOT** objects or **LACK** enumerable properties\n      // you are going to have a bad time.\n\n      var metalen = metas.length;\n\n      if (metalen) {\n        for (var i = 0; i < metalen; i++) {\n          Object.assign(info, metas[i]);\n        }\n      }\n\n      info.message = util.format.apply(util, [msg].concat(_toConsumableArray(splat)));\n      return info;\n    }\n    /**\n      * Transforms the `info` message by using `util.format` to complete\n      * any `info.message` provided it has string interpolation tokens.\n      * If no tokens exist then `info` is immutable.\n      *\n      * @param  {Info} info Logform info message.\n      * @param  {Object} opts Options for this instance.\n      * @returns {Info} Modified info message\n      */\n\n  }, {\n    key: \"transform\",\n    value: function transform(info) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat; // No need to process anything if splat is undefined\n\n      if (!splat || !splat.length) {\n        return info;\n      } // Extract tokens, if none available default to empty array to\n      // ensure consistancy in expected results\n\n\n      var tokens = msg && msg.match && msg.match(formatRegExp); // This condition will take care of inputs with info[SPLAT]\n      // but no tokens present\n\n      if (!tokens && (splat || splat.length)) {\n        var metas = splat.length > 1 ? splat.splice(0) : splat; // Now that { splat } has been separated from any potential { meta }. we\n        // can assign this to the `info` object and write it to our format stream.\n        // If the additional metas are **NOT** objects or **LACK** enumerable properties\n        // you are going to have a bad time.\n\n        var metalen = metas.length;\n\n        if (metalen) {\n          for (var i = 0; i < metalen; i++) {\n            Object.assign(info, metas[i]);\n          }\n        }\n\n        return info;\n      }\n\n      if (tokens) {\n        return this._splat(info, tokens);\n      }\n\n      return info;\n    }\n  }]);\n\n  return Splatter;\n}();\n/*\n * function splat (info)\n * Returns a new instance of the splat format TransformStream\n * which performs string interpolation from `info` objects. This was\n * previously exposed implicitly in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new Splatter(opts);\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/logform/dist/splat.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/logform/dist/splat.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}}],"sources":{"../node_modules/logform/dist/splat.js":"'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar util = require('util');\n\nvar _require = require('triple-beam'),\n    SPLAT = _require.SPLAT;\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\n\n\nvar formatRegExp = /%[scdjifoO%]/g;\n/**\n * Captures the number of escaped % signs in a format string (i.e. %s strings).\n * @type {RegExp}\n */\n\nvar escapedPercent = /%%/g;\n\nvar Splatter =\n/*#__PURE__*/\nfunction () {\n  function Splatter(opts) {\n    _classCallCheck(this, Splatter);\n\n    this.options = opts;\n  }\n  /**\n     * Check to see if tokens <= splat.length, assign { splat, meta } into the\n     * `info` accordingly, and write to this instance.\n     *\n     * @param  {Info} info Logform info message.\n     * @param  {String[]} tokens Set of string interpolation tokens.\n     * @returns {Info} Modified info message\n     * @private\n     */\n\n\n  _createClass(Splatter, [{\n    key: \"_splat\",\n    value: function _splat(info, tokens) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat || [];\n      var percents = msg.match(escapedPercent);\n      var escapes = percents && percents.length || 0; // The expected splat is the number of tokens minus the number of escapes\n      // e.g.\n      // - { expectedSplat: 3 } '%d %s %j'\n      // - { expectedSplat: 5 } '[%s] %d%% %d%% %s %j'\n      //\n      // Any \"meta\" will be arugments in addition to the expected splat size\n      // regardless of type. e.g.\n      //\n      // logger.log('info', '%d%% %s %j', 100, 'wow', { such: 'js' }, { thisIsMeta: true });\n      // would result in splat of four (4), but only three (3) are expected. Therefore:\n      //\n      // extraSplat = 3 - 4 = -1\n      // metas = [100, 'wow', { such: 'js' }, { thisIsMeta: true }].splice(-1, -1 * -1);\n      // splat = [100, 'wow', { such: 'js' }]\n\n      var expectedSplat = tokens.length - escapes;\n      var extraSplat = expectedSplat - splat.length;\n      var metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : []; // Now that { splat } has been separated from any potential { meta }. we\n      // can assign this to the `info` object and write it to our format stream.\n      // If the additional metas are **NOT** objects or **LACK** enumerable properties\n      // you are going to have a bad time.\n\n      var metalen = metas.length;\n\n      if (metalen) {\n        for (var i = 0; i < metalen; i++) {\n          Object.assign(info, metas[i]);\n        }\n      }\n\n      info.message = util.format.apply(util, [msg].concat(_toConsumableArray(splat)));\n      return info;\n    }\n    /**\n      * Transforms the `info` message by using `util.format` to complete\n      * any `info.message` provided it has string interpolation tokens.\n      * If no tokens exist then `info` is immutable.\n      *\n      * @param  {Info} info Logform info message.\n      * @param  {Object} opts Options for this instance.\n      * @returns {Info} Modified info message\n      */\n\n  }, {\n    key: \"transform\",\n    value: function transform(info) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat; // No need to process anything if splat is undefined\n\n      if (!splat || !splat.length) {\n        return info;\n      } // Extract tokens, if none available default to empty array to\n      // ensure consistancy in expected results\n\n\n      var tokens = msg && msg.match && msg.match(formatRegExp); // This condition will take care of inputs with info[SPLAT]\n      // but no tokens present\n\n      if (!tokens && (splat || splat.length)) {\n        var metas = splat.length > 1 ? splat.splice(0) : splat; // Now that { splat } has been separated from any potential { meta }. we\n        // can assign this to the `info` object and write it to our format stream.\n        // If the additional metas are **NOT** objects or **LACK** enumerable properties\n        // you are going to have a bad time.\n\n        var metalen = metas.length;\n\n        if (metalen) {\n          for (var i = 0; i < metalen; i++) {\n            Object.assign(info, metas[i]);\n          }\n        }\n\n        return info;\n      }\n\n      if (tokens) {\n        return this._splat(info, tokens);\n      }\n\n      return info;\n    }\n  }]);\n\n  return Splatter;\n}();\n/*\n * function splat (info)\n * Returns a new instance of the splat format TransformStream\n * which performs string interpolation from `info` objects. This was\n * previously exposed implicitly in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new Splatter(opts);\n};"},"lineCount":157}},"error":null,"hash":"030d1b17ec541425d0bf4f1005555fd5","cacheData":{"env":{}}}