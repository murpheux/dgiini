{"id":"../node_modules/mongodb-core/lib/sdam/topology_description.js","dependencies":[{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/package.json","includedInParent":true,"mtime":1563323962672},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/.babelrc","includedInParent":true,"mtime":1557029603000},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/package.json","includedInParent":true,"mtime":1561227911279},{"name":"./server_description","loc":{"line":3,"column":34},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/sdam/topology_description.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/sdam/server_description.js"},{"name":"../topologies/read_preference","loc":{"line":4,"column":31},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/sdam/topology_description.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/topologies/read_preference.js"},{"name":"../wireprotocol/constants","loc":{"line":5,"column":31},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/sdam/topology_description.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/mongodb-core/lib/wireprotocol/constants.js"}],"generated":{"js":"'use strict';\nconst ServerType = require('./server_description').ServerType;\nconst ServerDescription = require('./server_description').ServerDescription;\nconst ReadPreference = require('../topologies/read_preference');\nconst WIRE_CONSTANTS = require('../wireprotocol/constants');\n\n// contstants related to compatability checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\n\n// An enumeration of topology types we know about\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n};\n\n// Representation of a deployment of servers\nclass TopologyDescription {\n  /**\n   * Create a TopologyDescription\n   *\n   * @param {string} topologyType\n   * @param {Map<string, ServerDescription>} serverDescriptions the a map of address to ServerDescription\n   * @param {string} setName\n   * @param {number} maxSetVersion\n   * @param {ObjectId} maxElectionId\n   */\n  constructor(\n    topologyType,\n    serverDescriptions,\n    setName,\n    maxSetVersion,\n    maxElectionId,\n    commonWireVersion,\n    options,\n    error\n  ) {\n    options = options || {};\n\n    // TODO: consider assigning all these values to a temporary value `s` which\n    //       we use `Object.freeze` on, ensuring the internal state of this type\n    //       is immutable.\n    this.type = topologyType || TopologyType.Unknown;\n    this.setName = setName || null;\n    this.maxSetVersion = maxSetVersion || null;\n    this.maxElectionId = maxElectionId || null;\n    this.servers = serverDescriptions || new Map();\n    this.stale = false;\n    this.compatible = true;\n    this.compatibilityError = null;\n    this.logicalSessionTimeoutMinutes = null;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 0;\n    this.localThresholdMS = options.localThresholdMS || 0;\n    this.options = options;\n    this.error = error;\n    this.commonWireVersion = commonWireVersion || null;\n\n    // determine server compatibility\n    for (const serverDescription of this.servers.values()) {\n      if (serverDescription.type === ServerType.Unknown) continue;\n\n      if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${\n          serverDescription.minWireVersion\n        }, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n      }\n\n      if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${\n          serverDescription.maxWireVersion\n        }, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n        break;\n      }\n    }\n\n    // Whenever a client updates the TopologyDescription from an ismaster response, it MUST set\n    // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n    // value among ServerDescriptions of all data-bearing server types. If any have a null\n    // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n    // set to null.\n    const readableServers = Array.from(this.servers.values()).filter(s => s.isReadable);\n    this.logicalSessionTimeoutMinutes = readableServers.reduce((result, server) => {\n      if (server.logicalSessionTimeoutMinutes == null) return null;\n      if (result == null) return server.logicalSessionTimeoutMinutes;\n      return Math.min(result, server.logicalSessionTimeoutMinutes);\n    }, null);\n  }\n\n  /**\n   * Returns a copy of this description updated with a given ServerDescription\n   *\n   * @param {ServerDescription} serverDescription\n   */\n  update(serverDescription) {\n    const address = serverDescription.address;\n    // NOTE: there are a number of prime targets for refactoring here\n    //       once we support destructuring assignments\n\n    // potentially mutated values\n    let topologyType = this.type;\n    let setName = this.setName;\n    let maxSetVersion = this.maxSetVersion;\n    let maxElectionId = this.maxElectionId;\n    let commonWireVersion = this.commonWireVersion;\n    let error = serverDescription.error || null;\n\n    const serverType = serverDescription.type;\n    let serverDescriptions = new Map(this.servers);\n\n    // update common wire version\n    if (serverDescription.maxWireVersion !== 0) {\n      if (commonWireVersion == null) {\n        commonWireVersion = serverDescription.maxWireVersion;\n      } else {\n        commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n      }\n    }\n\n    // update the actual server description\n    serverDescriptions.set(address, serverDescription);\n\n    if (topologyType === TopologyType.Single) {\n      // once we are defined as single, that never changes\n      return new TopologyDescription(\n        TopologyType.Single,\n        serverDescriptions,\n        setName,\n        maxSetVersion,\n        maxElectionId,\n        commonWireVersion,\n        this.options,\n        error\n      );\n    }\n\n    if (topologyType === TopologyType.Unknown) {\n      if (serverType === ServerType.Standalone) {\n        serverDescriptions.delete(address);\n      } else {\n        topologyType = topologyTypeForServerType(serverType);\n      }\n    }\n\n    if (topologyType === TopologyType.Sharded) {\n      if ([ServerType.Mongos, ServerType.Unknown].indexOf(serverType) === -1) {\n        serverDescriptions.delete(address);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetNoPrimary) {\n      if ([ServerType.Mongos, ServerType.Unknown].indexOf(serverType) >= 0) {\n        serverDescriptions.delete(address);\n      }\n\n      if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          setName,\n          serverDescription,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        (topologyType = result[0]),\n          (setName = result[1]),\n          (maxSetVersion = result[2]),\n          (maxElectionId = result[3]);\n      } else if (\n        [ServerType.RSSecondary, ServerType.RSArbiter, ServerType.RSOther].indexOf(serverType) >= 0\n      ) {\n        const result = updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription);\n        (topologyType = result[0]), (setName = result[1]);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetWithPrimary) {\n      if ([ServerType.Standalone, ServerType.Mongos].indexOf(serverType) >= 0) {\n        serverDescriptions.delete(address);\n        topologyType = checkHasPrimary(serverDescriptions);\n      } else if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          setName,\n          serverDescription,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        (topologyType = result[0]),\n          (setName = result[1]),\n          (maxSetVersion = result[2]),\n          (maxElectionId = result[3]);\n      } else if (\n        [ServerType.RSSecondary, ServerType.RSArbiter, ServerType.RSOther].indexOf(serverType) >= 0\n      ) {\n        topologyType = updateRsWithPrimaryFromMember(\n          serverDescriptions,\n          setName,\n          serverDescription\n        );\n      } else {\n        topologyType = checkHasPrimary(serverDescriptions);\n      }\n    }\n\n    return new TopologyDescription(\n      topologyType,\n      serverDescriptions,\n      setName,\n      maxSetVersion,\n      maxElectionId,\n      commonWireVersion,\n      this.options,\n      error\n    );\n  }\n\n  /**\n   * Determines if the topology has a readable server available. See the table in the\n   * following section for behaviour rules.\n   *\n   * @param {ReadPreference} [readPreference] An optional read preference for determining if a readable server is present\n   * @return {Boolean} Whether there is a readable server in this topology\n   */\n  hasReadableServer(/* readPreference */) {\n    // To be implemented when server selection is implemented\n  }\n\n  /**\n   * Determines if the topology has a writable server available. See the table in the\n   * following section for behaviour rules.\n   *\n   * @return {Boolean} Whether there is a writable server in this topology\n   */\n  hasWritableServer() {\n    return this.hasReadableServer(ReadPreference.primary);\n  }\n\n  /**\n   * Determines if the topology has a definition for the provided address\n   *\n   * @param {String} address\n   * @return {Boolean} Whether the topology knows about this server\n   */\n  hasServer(address) {\n    return this.servers.has(address);\n  }\n}\n\nfunction topologyTypeForServerType(serverType) {\n  if (serverType === ServerType.Mongos) return TopologyType.Sharded;\n  if (serverType === ServerType.RSPrimary) return TopologyType.ReplicaSetWithPrimary;\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nfunction updateRsFromPrimary(\n  serverDescriptions,\n  setName,\n  serverDescription,\n  maxSetVersion,\n  maxElectionId\n) {\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n  }\n\n  const electionIdOID = serverDescription.electionId ? serverDescription.electionId.$oid : null;\n  const maxElectionIdOID = maxElectionId ? maxElectionId.$oid : null;\n  if (serverDescription.setVersion != null && electionIdOID != null) {\n    if (maxSetVersion != null && maxElectionIdOID != null) {\n      if (maxSetVersion > serverDescription.setVersion || maxElectionIdOID > electionIdOID) {\n        // this primary is stale, we must remove it\n        serverDescriptions.set(\n          serverDescription.address,\n          new ServerDescription(serverDescription.address)\n        );\n\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n      }\n    }\n\n    maxElectionId = serverDescription.electionId;\n  }\n\n  if (\n    serverDescription.setVersion != null &&\n    (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)\n  ) {\n    maxSetVersion = serverDescription.setVersion;\n  }\n\n  // We've heard from the primary. Is it the same primary as before?\n  for (const address of serverDescriptions.keys()) {\n    const server = serverDescriptions.get(address);\n\n    if (server.type === ServerType.RSPrimary && server.address !== serverDescription.address) {\n      // Reset old primary's type to Unknown.\n      serverDescriptions.set(address, new ServerDescription(server.address));\n\n      // There can only be one primary\n      break;\n    }\n  }\n\n  // Discover new hosts from this primary's response.\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  // Remove hosts not in the response.\n  const currentAddresses = Array.from(serverDescriptions.keys());\n  const responseAddresses = serverDescription.allHosts;\n  currentAddresses.filter(addr => responseAddresses.indexOf(addr) === -1).forEach(address => {\n    serverDescriptions.delete(address);\n  });\n\n  return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\n\nfunction updateRsWithPrimaryFromMember(serverDescriptions, setName, serverDescription) {\n  if (setName == null) {\n    throw new TypeError('setName is required');\n  }\n\n  if (\n    setName !== serverDescription.setName ||\n    (serverDescription.me && serverDescription.address !== serverDescription.me)\n  ) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return checkHasPrimary(serverDescriptions);\n}\n\nfunction updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription) {\n  let topologyType = TopologyType.ReplicaSetNoPrimary;\n\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [topologyType, setName];\n  }\n\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return [topologyType, setName];\n}\n\nfunction checkHasPrimary(serverDescriptions) {\n  for (const addr of serverDescriptions.keys()) {\n    if (serverDescriptions.get(addr).type === ServerType.RSPrimary) {\n      return TopologyType.ReplicaSetWithPrimary;\n    }\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nmodule.exports = {\n  TopologyType,\n  TopologyDescription\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/mongodb-core/lib/sdam/topology_description.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}}],"sources":{"../node_modules/mongodb-core/lib/sdam/topology_description.js":"'use strict';\nconst ServerType = require('./server_description').ServerType;\nconst ServerDescription = require('./server_description').ServerDescription;\nconst ReadPreference = require('../topologies/read_preference');\nconst WIRE_CONSTANTS = require('../wireprotocol/constants');\n\n// contstants related to compatability checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\n\n// An enumeration of topology types we know about\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n};\n\n// Representation of a deployment of servers\nclass TopologyDescription {\n  /**\n   * Create a TopologyDescription\n   *\n   * @param {string} topologyType\n   * @param {Map<string, ServerDescription>} serverDescriptions the a map of address to ServerDescription\n   * @param {string} setName\n   * @param {number} maxSetVersion\n   * @param {ObjectId} maxElectionId\n   */\n  constructor(\n    topologyType,\n    serverDescriptions,\n    setName,\n    maxSetVersion,\n    maxElectionId,\n    commonWireVersion,\n    options,\n    error\n  ) {\n    options = options || {};\n\n    // TODO: consider assigning all these values to a temporary value `s` which\n    //       we use `Object.freeze` on, ensuring the internal state of this type\n    //       is immutable.\n    this.type = topologyType || TopologyType.Unknown;\n    this.setName = setName || null;\n    this.maxSetVersion = maxSetVersion || null;\n    this.maxElectionId = maxElectionId || null;\n    this.servers = serverDescriptions || new Map();\n    this.stale = false;\n    this.compatible = true;\n    this.compatibilityError = null;\n    this.logicalSessionTimeoutMinutes = null;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 0;\n    this.localThresholdMS = options.localThresholdMS || 0;\n    this.options = options;\n    this.error = error;\n    this.commonWireVersion = commonWireVersion || null;\n\n    // determine server compatibility\n    for (const serverDescription of this.servers.values()) {\n      if (serverDescription.type === ServerType.Unknown) continue;\n\n      if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${\n          serverDescription.minWireVersion\n        }, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n      }\n\n      if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${\n          serverDescription.maxWireVersion\n        }, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n        break;\n      }\n    }\n\n    // Whenever a client updates the TopologyDescription from an ismaster response, it MUST set\n    // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n    // value among ServerDescriptions of all data-bearing server types. If any have a null\n    // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n    // set to null.\n    const readableServers = Array.from(this.servers.values()).filter(s => s.isReadable);\n    this.logicalSessionTimeoutMinutes = readableServers.reduce((result, server) => {\n      if (server.logicalSessionTimeoutMinutes == null) return null;\n      if (result == null) return server.logicalSessionTimeoutMinutes;\n      return Math.min(result, server.logicalSessionTimeoutMinutes);\n    }, null);\n  }\n\n  /**\n   * Returns a copy of this description updated with a given ServerDescription\n   *\n   * @param {ServerDescription} serverDescription\n   */\n  update(serverDescription) {\n    const address = serverDescription.address;\n    // NOTE: there are a number of prime targets for refactoring here\n    //       once we support destructuring assignments\n\n    // potentially mutated values\n    let topologyType = this.type;\n    let setName = this.setName;\n    let maxSetVersion = this.maxSetVersion;\n    let maxElectionId = this.maxElectionId;\n    let commonWireVersion = this.commonWireVersion;\n    let error = serverDescription.error || null;\n\n    const serverType = serverDescription.type;\n    let serverDescriptions = new Map(this.servers);\n\n    // update common wire version\n    if (serverDescription.maxWireVersion !== 0) {\n      if (commonWireVersion == null) {\n        commonWireVersion = serverDescription.maxWireVersion;\n      } else {\n        commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n      }\n    }\n\n    // update the actual server description\n    serverDescriptions.set(address, serverDescription);\n\n    if (topologyType === TopologyType.Single) {\n      // once we are defined as single, that never changes\n      return new TopologyDescription(\n        TopologyType.Single,\n        serverDescriptions,\n        setName,\n        maxSetVersion,\n        maxElectionId,\n        commonWireVersion,\n        this.options,\n        error\n      );\n    }\n\n    if (topologyType === TopologyType.Unknown) {\n      if (serverType === ServerType.Standalone) {\n        serverDescriptions.delete(address);\n      } else {\n        topologyType = topologyTypeForServerType(serverType);\n      }\n    }\n\n    if (topologyType === TopologyType.Sharded) {\n      if ([ServerType.Mongos, ServerType.Unknown].indexOf(serverType) === -1) {\n        serverDescriptions.delete(address);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetNoPrimary) {\n      if ([ServerType.Mongos, ServerType.Unknown].indexOf(serverType) >= 0) {\n        serverDescriptions.delete(address);\n      }\n\n      if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          setName,\n          serverDescription,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        (topologyType = result[0]),\n          (setName = result[1]),\n          (maxSetVersion = result[2]),\n          (maxElectionId = result[3]);\n      } else if (\n        [ServerType.RSSecondary, ServerType.RSArbiter, ServerType.RSOther].indexOf(serverType) >= 0\n      ) {\n        const result = updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription);\n        (topologyType = result[0]), (setName = result[1]);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetWithPrimary) {\n      if ([ServerType.Standalone, ServerType.Mongos].indexOf(serverType) >= 0) {\n        serverDescriptions.delete(address);\n        topologyType = checkHasPrimary(serverDescriptions);\n      } else if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          setName,\n          serverDescription,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        (topologyType = result[0]),\n          (setName = result[1]),\n          (maxSetVersion = result[2]),\n          (maxElectionId = result[3]);\n      } else if (\n        [ServerType.RSSecondary, ServerType.RSArbiter, ServerType.RSOther].indexOf(serverType) >= 0\n      ) {\n        topologyType = updateRsWithPrimaryFromMember(\n          serverDescriptions,\n          setName,\n          serverDescription\n        );\n      } else {\n        topologyType = checkHasPrimary(serverDescriptions);\n      }\n    }\n\n    return new TopologyDescription(\n      topologyType,\n      serverDescriptions,\n      setName,\n      maxSetVersion,\n      maxElectionId,\n      commonWireVersion,\n      this.options,\n      error\n    );\n  }\n\n  /**\n   * Determines if the topology has a readable server available. See the table in the\n   * following section for behaviour rules.\n   *\n   * @param {ReadPreference} [readPreference] An optional read preference for determining if a readable server is present\n   * @return {Boolean} Whether there is a readable server in this topology\n   */\n  hasReadableServer(/* readPreference */) {\n    // To be implemented when server selection is implemented\n  }\n\n  /**\n   * Determines if the topology has a writable server available. See the table in the\n   * following section for behaviour rules.\n   *\n   * @return {Boolean} Whether there is a writable server in this topology\n   */\n  hasWritableServer() {\n    return this.hasReadableServer(ReadPreference.primary);\n  }\n\n  /**\n   * Determines if the topology has a definition for the provided address\n   *\n   * @param {String} address\n   * @return {Boolean} Whether the topology knows about this server\n   */\n  hasServer(address) {\n    return this.servers.has(address);\n  }\n}\n\nfunction topologyTypeForServerType(serverType) {\n  if (serverType === ServerType.Mongos) return TopologyType.Sharded;\n  if (serverType === ServerType.RSPrimary) return TopologyType.ReplicaSetWithPrimary;\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nfunction updateRsFromPrimary(\n  serverDescriptions,\n  setName,\n  serverDescription,\n  maxSetVersion,\n  maxElectionId\n) {\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n  }\n\n  const electionIdOID = serverDescription.electionId ? serverDescription.electionId.$oid : null;\n  const maxElectionIdOID = maxElectionId ? maxElectionId.$oid : null;\n  if (serverDescription.setVersion != null && electionIdOID != null) {\n    if (maxSetVersion != null && maxElectionIdOID != null) {\n      if (maxSetVersion > serverDescription.setVersion || maxElectionIdOID > electionIdOID) {\n        // this primary is stale, we must remove it\n        serverDescriptions.set(\n          serverDescription.address,\n          new ServerDescription(serverDescription.address)\n        );\n\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n      }\n    }\n\n    maxElectionId = serverDescription.electionId;\n  }\n\n  if (\n    serverDescription.setVersion != null &&\n    (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)\n  ) {\n    maxSetVersion = serverDescription.setVersion;\n  }\n\n  // We've heard from the primary. Is it the same primary as before?\n  for (const address of serverDescriptions.keys()) {\n    const server = serverDescriptions.get(address);\n\n    if (server.type === ServerType.RSPrimary && server.address !== serverDescription.address) {\n      // Reset old primary's type to Unknown.\n      serverDescriptions.set(address, new ServerDescription(server.address));\n\n      // There can only be one primary\n      break;\n    }\n  }\n\n  // Discover new hosts from this primary's response.\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  // Remove hosts not in the response.\n  const currentAddresses = Array.from(serverDescriptions.keys());\n  const responseAddresses = serverDescription.allHosts;\n  currentAddresses.filter(addr => responseAddresses.indexOf(addr) === -1).forEach(address => {\n    serverDescriptions.delete(address);\n  });\n\n  return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\n\nfunction updateRsWithPrimaryFromMember(serverDescriptions, setName, serverDescription) {\n  if (setName == null) {\n    throw new TypeError('setName is required');\n  }\n\n  if (\n    setName !== serverDescription.setName ||\n    (serverDescription.me && serverDescription.address !== serverDescription.me)\n  ) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return checkHasPrimary(serverDescriptions);\n}\n\nfunction updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription) {\n  let topologyType = TopologyType.ReplicaSetNoPrimary;\n\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [topologyType, setName];\n  }\n\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return [topologyType, setName];\n}\n\nfunction checkHasPrimary(serverDescriptions) {\n  for (const addr of serverDescriptions.keys()) {\n    if (serverDescriptions.get(addr).type === ServerType.RSPrimary) {\n      return TopologyType.ReplicaSetWithPrimary;\n    }\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nmodule.exports = {\n  TopologyType,\n  TopologyDescription\n};\n"},"lineCount":382}},"error":null,"hash":"864338b8af6bc0f91316fa666e2acd64","cacheData":{"env":{}}}