#!groovy

pipeline {
    agent any
    environment {
        APP_NAME = 'dgiini'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        IMAGE_VERSION="v_${BUILD_NUMBER}"
        NOTIFICATION_EMAIL = 'dapo.onawole@gmail.com'
        GIT_URL = 'ssh://jenkins@scarlet/projects.git/projects/dgiini'
        //ARTIFACT_URL = 'http://gru:8088/job/dgiini/lastSuccessfulBuild/artifact/\*zip\*/release_${BUILD_NUMBER}.zip'
    }
    parameters {
        booleanParam(name: 'deploy', defaultValue: false, description: 'Deploy if true')
        stringParam(name: 'branch', defaultValue: 'develop', description: 'Repository branch')
    }
    tools {
        nodejs "node"
        git "Default"
    }
    stages {
        stage('preparation') {
            steps {
                deleteDir() /* clean up our workspace */

                // Git repository
                git branch: $branch, url: "${GIT_URL}"
            }
        }
        stage('install dependencies') {
            steps {
                sh '''
                    cd ${WORKSPACE}/ms
                    npm install

                    cd ${WORKSPACE}/web
                    npm install
                '''
            }
        }
        stage('Code analyse') {
            steps {
                sh '''
                    cd ${WORKSPACE}/ms
                    npm run lint

                    cd ${WORKSPACE}/web
                    npm run lint
                '''
            }
        }
        stage('Unit test') {
            steps {
                sh '''
                    cd ${WORKSPACE}/ms
                    npm run test
                '''
            }
        }
        stage('Create version file') {
            steps {
                writeFile file: 'build_version', text: '{"version": "${BUILD_NUMBER}"}'
            }
        }
        stage('build app') {
            parallel {
                stage('Build web') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/web
                            npm run build-docker
                        '''
                    }
                }
                stage('Build apigw') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/gw
                            npm install
                            npm run build
                        '''
                        sh 'cp ${WORKSPACE}/gw/package.json ${WORKSPACE}/gw/dist/apigw/'
                        sh 'cp ${WORKSPACE}/build_version ${WORKSPACE}/gw/dist/apigw/'
                        sh 'cp ${WORKSPACE}/gw/config/gateway.config.docker.yml ${WORKSPACE}/gw/dist/apigw/config/gateway.config.yml'
                        sh 'cp -r ${WORKSPACE}/gw/cert ${WORKSPACE}/gw/dist/apigw/'
                    }
                }
                stage('Build task_api') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            OUT_DIR=dist/mstask npm run build src/task_api.js
                        '''
                        sh 'cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/mstask/'
                        sh 'cp ${WORKSPACE}/build_version ${WORKSPACE}/ms/dist/mstask/'
                    }
                }
                stage('Build auth_api') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            OUT_DIR=dist/msauth npm run build auth_api.js
                        '''
                        sh 'cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msauth/'
                        sh 'cp ${WORKSPACE}/build_version ${WORKSPACE}/ms/dist/msauth/'
                    }
                }
                stage('Build msg_api') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            OUT_DIR=dist/msmsg npm run build msg_api.js
                        '''
                        sh 'cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msmsg/'
                        sh 'cp ${WORKSPACE}/build_version ${WORKSPACE}/ms/dist/msmsg/'
                    }
                }
            }
        }
        stage('Zip/Artifacts') {
            steps {
                zip zipFile: 'deploy.zip', archive: false, dir: 'deploy'
                archiveArtifacts artifacts: 'deploy.zip', fingerprint: true

                zip zipFile: 'web.zip', archive: false, dir: 'web/dist/dgiini'
                archiveArtifacts artifacts: 'web.zip', fingerprint: true

                zip zipFile: 'apigw.zip', archive: false, dir: 'gw/dist/apigw'
                archiveArtifacts artifacts: 'apigw.zip', fingerprint: true

                zip zipFile: 'mstask.zip', archive: false, dir: 'ms/dist/mstask'
                archiveArtifacts artifacts: 'mstask.zip', fingerprint: true

                zip zipFile: 'msauth.zip', archive: false, dir: 'ms/dist/msauth'
                archiveArtifacts artifacts: 'msauth.zip', fingerprint: true

                zip zipFile: 'msmsg.zip', archive: false, dir: 'ms/dist/msmsg'
                archiveArtifacts artifacts: 'msmsg.zip', fingerprint: true
            }
        }
        stage('clean') {
            steps {
                deleteDir() /* clean up our workspace */
            }
        }
        // stage('Deploy') {
        //     when { deploy true }
        //     steps {
        //         // deploy with ansible
        //         ansiblePlaybook colorized: true, 
        //             credentialsId: 'jenkins',
        //             limit: "scarlet",
        //             installation: 'ansible',
        //             inventory: 'inventory.ini', 
        //             playbook: 'playbook.yml', 
        //             sudo: true,
        //             sudoUser: 'jenkins'
        //     }
        // }
    }
    post {
        success {
            slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#build', color: 'green', iconEmoji: 'ghost', message: 'Build successfully completed - ${JOB_NAME} ${BUILD_NUMBER} (<${BUILD_URL}|Open>) - dgiini!!', tokenCredentialId: 'build-admin'
        }
        failure {
            slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#build', color: 'red', iconEmoji: 'ghost', message: 'Build failed! - ${JOB_NAME} ${BUILD_NUMBER} (<${BUILD_URL}|Open>) - dgiini!!', tokenCredentialId: 'build-admin'
        }
    }
}