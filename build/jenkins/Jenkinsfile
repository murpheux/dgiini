pipeline {
    environment {
        NOTIFICATION_EMAIL = 'dapo.onawole@gmail.com'
    }
    agent any
    // parameters {
    //     string(defaultValue: "dapo.onawole@gmail.com", description: 'email for notifications', name: 'notification_email')
    // }
    tools {
        nodejs "node"
        git "Default"
    }
    stages {
        stage('preparation') {
            steps {
                deleteDir() /* clean up our workspace */

                // Git repository
                git branch: 'dev', url: 'ssh://jenkins@scarlet/projects.git/projects/dgiini'
            }
        }
        stage('install dependencies') {
            steps {
                sh '''
                    cd ${WORKSPACE}/ms
                    npm install
                '''
            }
        }
        stage('Code analyse') {
            steps {
                sh 'echo "Run some lints"'
            }
        }
        stage('Unit test') {
            steps {
                sh 'echo "Tests will back"'
            }
        }
        stage('build app') {
            parallel {
                stage('Build web') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/web
                            npm install
                            npm run build-docker
                        '''
                        sh 'ssh jenkins@scarlet "mkdir -p ~/release/release_${BUILD_NUMBER}/"'
                        sh 'scp -r ${WORKSPACE}/web/dist/* jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                        sh 'scp -r ${WORKSPACE}/deploy jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                    }
                }
                stage('Build apigw') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/gw
                            npm install
                            npm run build-gw
                        '''
                        sh 'cp ${WORKSPACE}/gw/package.json ${WORKSPACE}/gw/dist/apigw/'
                        sh 'cp ${WORKSPACE}/gw/config/gateway.config.docker.yml ${WORKSPACE}/gw/dist/apigw/config/gateway.config.yml'
                        sh 'cp -r ${WORKSPACE}/gw/cert ${WORKSPACE}/gw/dist/apigw/'
                        sh 'ssh jenkins@scarlet "mkdir -p ~/release/release_${BUILD_NUMBER}/"'
                        sh 'scp -r ${WORKSPACE}/gw/dist/apigw jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                    }
                }
                stage('Build task_api') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm run build-task
                        '''
                        sh 'cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/mstask/'
                        sh 'ssh jenkins@scarlet "mkdir -p ~/release/release_${BUILD_NUMBER}/"'
                        sh 'scp -r ${WORKSPACE}/ms/dist/mstask jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                    }
                }
                stage('Build auth_api') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm run build-auth
                        '''
                        sh 'cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msauth/'
                        sh 'ssh jenkins@scarlet "mkdir -p ~/release/release_${BUILD_NUMBER}/"'
                        sh 'scp -r ${WORKSPACE}/ms/dist/msauth jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                    }
                }
                stage('Build msg_api') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm run build-msg
                        '''
                        sh 'cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msmsg/'
                        sh 'ssh jenkins@scarlet "mkdir -p ~/release/release_${BUILD_NUMBER}/"'
                        sh 'scp -r ${WORKSPACE}/ms/dist/msmsg jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                    }
                }
            }
        }
        stage('Zip/Artifacts') {
            steps {
                script{
                    zip zipFile: 'deploy.zip', archive: false, dir: deploy
                    archiveArtifacts artifacts: 'deploy.zip', fingerprint: true

                    zip zipFile: 'web.zip', archive: false, dir: web/dist/dgiini
                    archiveArtifacts artifacts: 'web.zip', fingerprint: true
                    
                    zip zipFile: 'apigw.zip', archive: false, dir: gw/dist/apigw
                    archiveArtifacts artifacts: 'apigw.zip', fingerprint: true

                    zip zipFile: 'mstask.zip', archive: false, dir: ms/dist/mstask
                    archiveArtifacts artifacts: 'mstask.zip', fingerprint: true

                    zip zipFile: 'msauth.zip', archive: false, dir: ms/dist/msauth
                    archiveArtifacts artifacts: 'msauth.zip', fingerprint: true

                    zip zipFile: 'msmsg.zip', archive: false, dir: ms/dist/msmsg
                    archiveArtifacts artifacts: 'msmsg.zip', fingerprint: true
                }
            }
        }
        stage('clean') {
            steps {
                deleteDir() /* clean up our workspace */
            }
        }
    }
    post {
        success {
            //node('node1'){
            echo "Test succeeded"
            script {
                mail(bcc: '',
                    body: "Run ${JOB_NAME}-#${BUILD_NUMBER} succeeded. To get more details, visit the build results page: ${BUILD_URL}.",
                    cc: '',
                    from: 'jenkins-admin@gmail.com',
                    replyTo: '',
                    subject: "${JOB_NAME} ${BUILD_NUMBER} succeeded",
                    to: env.NOTIFICATION_EMAIL)

                    // if (env.archive_war =='yes')
                    // {
                    //     // ArchiveArtifact plugin
                    //     archiveArtifacts '**/java-calculator-*-SNAPSHOT.jar'
                    // }
                    // // Cucumber report plugin
                    // cucumber fileIncludePattern: '**/java-calculator/target/cucumber-report.json', sortingMethod: 'ALPHABETICAL'
                    //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/home/reports', reportFiles: 'reports.html', reportName: 'Performance Test Report', reportTitles: ''])
            }
            //}
        }
        failure {
            echo "Test failed"
            mail(bcc: '',
                body: "Run ${JOB_NAME}-#${BUILD_NUMBER} succeeded. To get more details, visit the build results page: ${BUILD_URL}.",
                cc: '',
                from: 'jenkins-admin@gmail.com',
                replyTo: '',
                subject: "${JOB_NAME} ${BUILD_NUMBER} failed",
                to: env.NOTIFICATION_EMAIL)
                //cucumber fileIncludePattern: '**/java-calculator/target/cucumber-report.json', sortingMethod: 'ALPHABETICAL'
                //publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/home/tester/reports', reportFiles: 'reports.html', reportName: 'Performance Test Report', reportTitles: ''])
        }
    }
}