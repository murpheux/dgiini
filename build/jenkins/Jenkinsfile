pipeline {
    agent {
        node {
            label 'linux'
        }
    }
    tools {
        nodejs "node"
        git "Default"
    }
    stages {
        stage('preparation') {
            steps {
                deleteDir() /* clean up our workspace */
                // Git repository
                //git 'ssh://jenkins@scarlet/projects.git/projects/dgiini'
            }
        }
        stage('checkout from git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/dev']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CleanBeforeCheckout'], 
                        [$class: 'CloneOption', noTags: true, reference: '', shallow: true]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: '886c7666-4207-4fed-9574-9cb2b0f4eca6',
                        url: 'ssh://jenkins@scarlet/projects.git/projects/dgiini'
                    ]
                ]])
            }
        }
        stage('install dependencies') {
            steps {
                sh '''
                    cd ${WORKSPACE}/ms
                    npm install
                '''
            }
        }
        stage('build app') {
            parallel {
                stage('Build web') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/web
                            npm install
                            npm run build-docker
                        '''
                        sh 'ssh jenkins@scarlet "mkdir -p ~/release/release_${BUILD_NUMBER}/"'
                        sh 'scp -r ${WORKSPACE}/web/dist/* jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                        sh 'scp -r ${WORKSPACE}/deploy jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                    }
                }
                stage('Build task_api') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm run build-task
                        '''
                        sh 'cp ${WORKSPACE}/ms/dependency.json dist/mstask/package.json'
                        sh 'ssh jenkins@scarlet "mkdir -p ~/release/release_${BUILD_NUMBER}/"'
                        sh 'scp -r ${WORKSPACE}/ms/dist/mstask jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                    }
                }
                stage('Build auth_api') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm run build-auth
                        '''
                        sh 'cp ${WORKSPACE}/ms/dependency.json dist/msauth/package.json'
                        sh 'ssh jenkins@scarlet "mkdir -p ~/release/release_${BUILD_NUMBER}/"'
                        sh 'scp -r ${WORKSPACE}/ms/dist/msauth jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                    }
                }
                stage('Build msg_api') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm run build-msg
                        '''
                        sh 'cp ${WORKSPACE}/ms/dependency.json dist/msmsg/package.json'
                        sh 'ssh jenkins@scarlet "mkdir -p ~/release/release_${BUILD_NUMBER}/"'
                        sh 'scp -r ${WORKSPACE}/ms/dist/msmsg jenkins@scarlet:~/release/release_${BUILD_NUMBER}/'
                    }
                }
            }
        }
        stage('clean') {
            steps {
                deleteDir() /* clean up our workspace */
            }
        }
    }
}