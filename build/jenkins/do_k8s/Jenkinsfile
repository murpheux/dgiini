#!groovy

pipeline {
    agent any
    environment {
        APP_NAME = 'dgiini'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        IMAGE_VERSION="v_${BUILD_NUMBER}"
        NOTIFICATION_EMAIL = 'dapo.onawole@gmail.com'
        GIT_URL = 'git@github.com:murpheux/dgiini.git'
        REGISTRY = 'registry.digitalocean.com/dgiini-k8s'
    }
    parameters {
        string(name: 'branch', defaultValue: 'develop', description: 'Repository branch')
    }
    tools {
        nodejs "node"
        git "git"
    }
    stages {
        stage('preparation') {
            steps {
                deleteDir() /* clean up our workspace */

                // Git repository
                git branch: "${branch}", url: "${GIT_URL}"

                sh '''
                    mkdir -p ${WORKSPACE}/deploy/docker/deploy/web/app
                    mkdir -p ${WORKSPACE}/deploy/docker/deploy/gw/app
                    mkdir -p ${WORKSPACE}/deploy/docker/deploy/task/app
                    mkdir -p ${WORKSPACE}/deploy/docker/deploy/auth/app
                    mkdir -p ${WORKSPACE}/deploy/docker/deploy/notify/app
                    mkdir -p ${WORKSPACE}/deploy/docker/deploy/review/app
                '''
            }
        }
        stage('replace env files'){
            steps {
                writeFile file: 'env.js', text: '!function(_){_.__env=_.__env||{},_.__env.apiUrl="https://gw.dgiini.ca/api",_.__env.enableDebug=!0}(this);'
                sh '''
                    mv env.js ${WORKSPACE}/web/src
                '''
            }
        }
        stage('install dependencies') {
            parallel {
                stage('install ms dependency') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm install
                        '''
                    }
                }
                stage('install web dependency') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/web
                            npm install
                        '''
                    }
                }
            }
        }
        stage('Code analyse') {
            parallel {
                stage('web lint') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/web
                            npm run lint
                        '''
                    }
                }
                stage('ms lint') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm run lint
                        '''
                    }
                }
            }
        }
        stage('Create version file') {
            steps {
                writeFile file: 'build_version.json', text: "{\"version\": ${BUILD_NUMBER}}"
            }
        }
        stage('run unit test') {
            parallel {
                stage('web test') {
                    steps {
                        dir("${WORKSPACE}/web"){
                            // sh '''
                            //     npm run test
                            // '''
                        }
                    }
                }
                stage('ms test') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            // sh '''
                            //     npm run test test/unit
                            // '''
                        }
                    }
                }
                
            }
        }
        stage('unsure why this is required'){
            steps {
                dir("${WORKSPACE}/ms"){
                    sh 'rm .babelrc'
                }
            }
        }
        stage('build app') {
            parallel {
                stage('Build web') {
                    steps {
                        dir("${WORKSPACE}/web"){
                            sh '''
                                npm run build-do-k8s
                            '''
                        }
                    }
                }
                stage('Build apigw') {
                    steps {
                        dir("${WORKSPACE}/gw"){
                            sh '''
                                npm install
                                npm run build
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/gw/package.json ${WORKSPACE}/gw/dist/apigw/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/gw/dist/apigw/
                            cp ${WORKSPACE}/gw/config/gateway.config.do.k8s.yml ${WORKSPACE}/gw/dist/apigw/config/gateway.config.yml
                            cp -r ${WORKSPACE}/gw/cert ${WORKSPACE}/gw/dist/apigw/
                        '''
                    }
                }
                stage('Build task.api') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            sh '''
                                OUT_DIR=dist/mstask npm run build src/task.api.js
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/mstask/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/ms/dist/mstask/
                        '''
                    }
                }
                stage('Build auth_api') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            sh '''
                                OUT_DIR=dist/msauth npm run build src/auth.api.js
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msauth/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/ms/dist/msauth/
                        '''
                    }
                }
                stage('Build notify_api') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            sh '''
                                OUT_DIR=dist/msnotify npm run build src/notify.api.js
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msnotify/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/ms/dist/msnotify/
                        '''
                    }
                }
                stage('Build review_api') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            sh '''
                                OUT_DIR=dist/msreview npm run build src/review.api.js
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msreview/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/ms/dist/msreview/
                        '''
                    }
                }
            }
        }
        stage('setup kubernetes build') {
            parallel {
                stage('for web'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/web/dist/dgiini/ ${WORKSPACE}/deploy/docker/deploy/web/app/web
                            mkdir ${WORKSPACE}/deploy/docker/deploy/web/app/nginx
                            cp ${WORKSPACE}/deploy/nginx/*.conf ${WORKSPACE}/deploy/docker/deploy/web/app/nginx
                            cp ${WORKSPACE}/deploy/nginx/dhparam.pem ${WORKSPACE}/deploy/docker/deploy/web/app/nginx
                            cp -r ${WORKSPACE}/web/ssl/ca/ ${WORKSPACE}/deploy/docker/deploy/web/app/nginx
                        '''        
                    }
                }
                stage('for apigw'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/gw/dist/apigw ${WORKSPACE}/deploy/docker/deploy/gw/app
                        '''        
                    }
                }
                stage('for auth'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/ms/dist/msauth ${WORKSPACE}/deploy/docker/deploy/auth/app
                        '''        
                    }
                }
                stage('for task'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/ms/dist/mstask ${WORKSPACE}/deploy/docker/deploy/task/app
                        '''        
                    }
                }
                stage('for notify'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/ms/dist/msnotify ${WORKSPACE}/deploy/docker/deploy/notify/app
                        '''        
                    }
                }
                stage('for review'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/ms/dist/msreview ${WORKSPACE}/deploy/docker/deploy/review/app
                        '''        
                    }
                }
            }
        }
        stage('initiate digital ocean repo') {
            steps {
                sh '''
                    doctl registry login
                '''        
            }
        }
        stage('build images') {
            parallel {
                stage('build and publish web') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/web"){
                            script {
                                webImage = docker.build "${REGISTRY}/web:${BUILD_NUMBER}"

                                docker.withRegistry( '', '' ) {
                                    webImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish apigw') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/gw"){
                            script {
                                gwImage = docker.build "${REGISTRY}/apigw:${BUILD_NUMBER}"

                                docker.withRegistry( '', '' ) {
                                    gwImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish auth') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/auth"){
                            script {
                                authImage = docker.build "${REGISTRY}/auth:${BUILD_NUMBER}"

                                docker.withRegistry( '', '' ) {
                                    authImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish task') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/task"){
                            script {
                                taskImage = docker.build "${REGISTRY}/task:${BUILD_NUMBER}"

                                docker.withRegistry( '', '' ) {
                                    taskImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish notify') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/notify"){
                            script {
                                notifyImage = docker.build "${REGISTRY}/notify:${BUILD_NUMBER}"

                                docker.withRegistry( '', '' ) {
                                    notifyImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish review') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/review"){
                            script {
                                reviewImage = docker.build "${REGISTRY}/review:${BUILD_NUMBER}"

                                docker.withRegistry( '', '' ) {
                                    reviewImage.push()
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('clean') {
            steps {
                deleteDir() /* clean up our workspace */
            }
        }
    }
}