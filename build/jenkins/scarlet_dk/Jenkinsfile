#!groovy

pipeline {
    agent any
    environment {
        APP_NAME = 'dgiini'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        IMAGE_VERSION="v_${BUILD_NUMBER}"
        NOTIFICATION_EMAIL = 'dapo.onawole@gmail.com'
        GIT_URL = 'git@github.com:murpheux/dgiini.git'
        REGISTRY = 'murpheux/dgiini_dk'
        REGISTRY_CREDENTIAL = 'docker-hub'
    }
    parameters {
        string(name: 'branch', defaultValue: 'develop', description: 'Repository branch')
    }
    tools {
        nodejs "node"
        git "git"
    }
    stages {
        stage('preparation') {
            steps {
                deleteDir() /* clean up our workspace */

                // Git repository
                git branch: "${branch}", url: "${GIT_URL}"

                sh '''
                    mkdir ${WORKSPACE}/deploy/docker/deploy/web/app
                    mkdir ${WORKSPACE}/deploy/docker/deploy/gw/app
                    mkdir ${WORKSPACE}/deploy/docker/deploy/task/app
                    mkdir ${WORKSPACE}/deploy/docker/deploy/auth/app
                    mkdir ${WORKSPACE}/deploy/docker/deploy/msg/app
                    mkdir ${WORKSPACE}/deploy/docker/deploy/notify/app
                    mkdir ${WORKSPACE}/deploy/docker/deploy/bill/app
                '''
            }
        }
        stage('replace env files'){
            steps {
                writeFile file: 'env.js', text: '!function(_){_.__env=_.__env||{},_.__env.apiUrl="https://sdpro.dynu.com:7000/api",_.__env.enableDebug=!0}(this);'
                sh '''
                    mv env.js ${WORKSPACE}/web/src
                '''
            }
        }
        stage('install dependencies') {
            parallel {
                stage('install ms dependency') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm install
                        '''
                    }
                }
                stage('install web dependency') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/web
                            npm install
                        '''
                    }
                }
            }
        }
        stage('Code analyse') {
            parallel {
                stage('web lint') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/web
                            npm run lint
                        '''
                    }
                }
                stage('ms lint') {
                    steps {
                        sh '''
                            cd ${WORKSPACE}/ms
                            npm run lint
                        '''
                    }
                }
            }
        }
        stage('Create version file') {
            steps {
                writeFile file: 'build_version.json', text: "{\"version\": ${BUILD_NUMBER}}"
            }
        }
        stage('run unit test') {
            steps {
                dir("${WORKSPACE}/ms"){
                    // sh '''
                    //     npm run test test/unit
                    // '''
                }
            }
        }
        stage('build app') {
            parallel {
                stage('Build web') {
                    steps {
                        dir("${WORKSPACE}/web"){
                            sh '''
                                npm run build-docker
                            '''
                        }
                    }
                }
                stage('Build apigw') {
                    steps {
                        dir("${WORKSPACE}/gw"){
                            sh '''
                                npm install
                                npm run build
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/gw/package.json ${WORKSPACE}/gw/dist/apigw/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/gw/dist/apigw/
                            cp ${WORKSPACE}/gw/config/gateway.config.docker.yml ${WORKSPACE}/gw/dist/apigw/config/gateway.config.yml
                            cp -r ${WORKSPACE}/gw/cert ${WORKSPACE}/gw/dist/apigw/
                        '''
                    }
                }
                stage('Build task.api') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            sh '''
                                OUT_DIR=dist/mstask npm run build src/task.api.js
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/mstask/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/ms/dist/mstask/
                        '''
                    }
                }
                stage('Build auth_api') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            sh '''
                                OUT_DIR=dist/msauth npm run build src/auth.api.js
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msauth/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/ms/dist/msauth/
                        '''
                    }
                }
                stage('Build msg_api') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            sh '''
                                OUT_DIR=dist/msmsg npm run build src/msg.api.js
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msmsg/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/ms/dist/msmsg/
                        '''
                    }
                }
                stage('Build notify_api') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            sh '''
                                OUT_DIR=dist/msnotify npm run build src/notify.api.js
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msnotify/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/ms/dist/msnotify/
                        '''
                    }
                }
                stage('Build bill_api') {
                    steps {
                        dir("${WORKSPACE}/ms"){
                            sh '''
                                OUT_DIR=dist/msbill npm run build src/bill.api.js
                            '''
                        }
                        sh '''
                            cp ${WORKSPACE}/ms/package.json ${WORKSPACE}/ms/dist/msbill/
                            cp ${WORKSPACE}/build_version.json ${WORKSPACE}/ms/dist/msbill/
                        '''
                    }
                }
            }
        }
        stage('Zip/Artifacts') {
            steps {
                zip zipFile: 'deploy.zip', archive: false, dir: 'deploy'
                archiveArtifacts artifacts: 'deploy.zip', fingerprint: true

                zip zipFile: 'web.zip', archive: false, dir: 'web/dist/dgiini'
                archiveArtifacts artifacts: 'web.zip', fingerprint: true

                zip zipFile: 'apigw.zip', archive: false, dir: 'gw/dist/apigw'
                archiveArtifacts artifacts: 'apigw.zip', fingerprint: true

                zip zipFile: 'mstask.zip', archive: false, dir: 'ms/dist/mstask'
                archiveArtifacts artifacts: 'mstask.zip', fingerprint: true

                zip zipFile: 'msauth.zip', archive: false, dir: 'ms/dist/msauth'
                archiveArtifacts artifacts: 'msauth.zip', fingerprint: true

                zip zipFile: 'msmsg.zip', archive: false, dir: 'ms/dist/msmsg'
                archiveArtifacts artifacts: 'msmsg.zip', fingerprint: true

                zip zipFile: 'msnotify.zip', archive: false, dir: 'ms/dist/msnotify'
                archiveArtifacts artifacts: 'msnotify.zip', fingerprint: true

                zip zipFile: 'msbill.zip', archive: false, dir: 'ms/dist/msbill'
                archiveArtifacts artifacts: 'msbill.zip', fingerprint: true
            }
        }
        stage('setup docker build') {
            parallel {
                stage('for web'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/web/dist/dgiini/ ${WORKSPACE}/deploy/docker/deploy/web/app/web
                            cp -r ${WORKSPACE}/deploy/nginx/ ${WORKSPACE}/deploy/docker/deploy/web/app/nginx
                        '''        
                    }
                }
                stage('for apigw'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/gw/dist/apigw ${WORKSPACE}/deploy/docker/deploy/gw/app
                        '''        
                    }
                }
                stage('for auth'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/ms/dist/msauth ${WORKSPACE}/deploy/docker/deploy/auth/app
                        '''        
                    }
                }
                stage('for task'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/gw/dist/mstask ${WORKSPACE}/deploy/docker/deploy/task/app
                        '''        
                    }
                }
                stage('for msg'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/gw/dist/mstask ${WORKSPACE}/deploy/docker/deploy/task/app
                        '''        
                    }
                }
                stage('for notify'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/gw/dist/msnotify ${WORKSPACE}/deploy/docker/deploy/notify/app
                        '''        
                    }
                }
                stage('for bill'){
                    steps {
                        sh '''
                            cp -r ${WORKSPACE}/gw/dist/msbill ${WORKSPACE}/deploy/docker/deploy/bill/app
                        '''        
                    }
                }
            }
        }
        stage('build images') {
            parallel {
                stage('build and publish web') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/web"){
                            script {
                                webImage = docker.build "${REGISTRY}_web:${BUILD_NUMBER}"

                                docker.withRegistry( '', REGISTRY_CREDENTIAL ) {
                                    webImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish apigw') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/gw"){
                            script {
                                gwImage = docker.build "${REGISTRY}_apigw:${BUILD_NUMBER}"

                                docker.withRegistry( '', REGISTRY_CREDENTIAL ) {
                                    gwImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish auth') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/auth"){
                            script {
                                gwImage = docker.build "${REGISTRY}_auth:${BUILD_NUMBER}"

                                docker.withRegistry( '', REGISTRY_CREDENTIAL ) {
                                    gwImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish task') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/task"){
                            script {
                                gwImage = docker.build "${REGISTRY}_task:${BUILD_NUMBER}"

                                docker.withRegistry( '', REGISTRY_CREDENTIAL ) {
                                    gwImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish msg') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/msg"){
                            script {
                                gwImage = docker.build "${REGISTRY}_msg:${BUILD_NUMBER}"

                                docker.withRegistry( '', REGISTRY_CREDENTIAL ) {
                                    gwImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish notify') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/notify"){
                            script {
                                gwImage = docker.build "${REGISTRY}_notify:${BUILD_NUMBER}"

                                docker.withRegistry( '', REGISTRY_CREDENTIAL ) {
                                    gwImage.push()
                                }
                            }
                        }
                    }
                }
                stage('build and publish bill') {
                    steps {
                        dir("${WORKSPACE}/deploy/docker/deploy/bill"){
                            script {
                                gwImage = docker.build "${REGISTRY}_bill:${BUILD_NUMBER}"

                                docker.withRegistry( '', REGISTRY_CREDENTIAL ) {
                                    gwImage.push()
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('clean') {
            steps {
                deleteDir() /* clean up our workspace */
            }
        }
    }
    // post {
    //     success {
    //         slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#build', color: 'green', iconEmoji: 'ghost', message: "Build successfully completed - ${JOB_NAME} ${BUILD_NUMBER} (<${BUILD_URL}|Open>) - dgiini!!", tokenCredentialId: 'build-admin'
    //     }
    //     failure {
    //         slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#build', color: 'red', iconEmoji: 'ghost', message: "Build failed! - ${JOB_NAME} ${BUILD_NUMBER} (<${BUILD_URL}|Open>) - dgiini!!", tokenCredentialId: 'build-admin'
    //     }
    // }
}