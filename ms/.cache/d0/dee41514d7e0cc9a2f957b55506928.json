{"id":"../node_modules/logform/dist/combine.js","dependencies":[{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/package.json","includedInParent":true,"mtime":1563323962672},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/.babelrc","includedInParent":true,"mtime":1557029603000},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/logform/package.json","includedInParent":true,"mtime":1561510407437},{"name":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/logform/.babelrc","includedInParent":true,"mtime":1561510407437},{"name":"./format","loc":{"line":3,"column":21},"parent":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/logform/dist/combine.js","resolved":"/Users/murpheux/Workspace/projects/dgiini/microservices/node_modules/logform/dist/format.js"}],"generated":{"js":"'use strict';\n\nvar format = require('./format');\n/*\n * function cascade(formats)\n * Returns a function that invokes the `._format` function in-order\n * for the specified set of `formats`. In this manner we say that Formats\n * are \"pipe-like\", but not a pure pumpify implementation. Since there is no back\n * pressure we can remove all of the \"readable\" plumbing in Node streams.\n */\n\n\nfunction cascade(formats) {\n  if (!formats.every(isValidFormat)) {\n    return;\n  }\n\n  return function (info) {\n    var obj = info;\n\n    for (var i = 0; i < formats.length; i++) {\n      obj = formats[i].transform(obj, formats[i].options);\n\n      if (!obj) {\n        return false;\n      }\n    }\n\n    return obj;\n  };\n}\n/*\n * function isValidFormat(format)\n * If the format does not define a `transform` function throw an error\n * with more detailed usage.\n */\n\n\nfunction isValidFormat(fmt) {\n  if (typeof fmt.transform !== 'function') {\n    throw new Error(['No transform function found on format. Did you create a format instance?', 'const myFormat = format(formatFn);', 'const instance = myFormat();'].join('\\n'));\n  }\n\n  return true;\n}\n/*\n * function combine (info)\n * Returns a new instance of the combine Format which combines the specified\n * formats into a new format. This is similar to a pipe-chain in transform streams.\n * We choose to combine the prototypes this way because there is no back pressure in\n * an in-memory transform chain.\n */\n\n\nmodule.exports = function () {\n  for (var _len = arguments.length, formats = new Array(_len), _key = 0; _key < _len; _key++) {\n    formats[_key] = arguments[_key];\n  }\n\n  var combinedFormat = format(cascade(formats));\n  var instance = combinedFormat();\n  instance.Format = combinedFormat.Format;\n  return instance;\n}; //\n// Export the cascade method for use in cli and other\n// combined formats that should not be assumed to be\n// singletons.\n//\n\n\nmodule.exports.cascade = cascade;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/logform/dist/combine.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/logform/dist/combine.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}}],"sources":{"../node_modules/logform/dist/combine.js":"'use strict';\n\nvar format = require('./format');\n/*\n * function cascade(formats)\n * Returns a function that invokes the `._format` function in-order\n * for the specified set of `formats`. In this manner we say that Formats\n * are \"pipe-like\", but not a pure pumpify implementation. Since there is no back\n * pressure we can remove all of the \"readable\" plumbing in Node streams.\n */\n\n\nfunction cascade(formats) {\n  if (!formats.every(isValidFormat)) {\n    return;\n  }\n\n  return function (info) {\n    var obj = info;\n\n    for (var i = 0; i < formats.length; i++) {\n      obj = formats[i].transform(obj, formats[i].options);\n\n      if (!obj) {\n        return false;\n      }\n    }\n\n    return obj;\n  };\n}\n/*\n * function isValidFormat(format)\n * If the format does not define a `transform` function throw an error\n * with more detailed usage.\n */\n\n\nfunction isValidFormat(fmt) {\n  if (typeof fmt.transform !== 'function') {\n    throw new Error(['No transform function found on format. Did you create a format instance?', 'const myFormat = format(formatFn);', 'const instance = myFormat();'].join('\\n'));\n  }\n\n  return true;\n}\n/*\n * function combine (info)\n * Returns a new instance of the combine Format which combines the specified\n * formats into a new format. This is similar to a pipe-chain in transform streams.\n * We choose to combine the prototypes this way because there is no back pressure in\n * an in-memory transform chain.\n */\n\n\nmodule.exports = function () {\n  for (var _len = arguments.length, formats = new Array(_len), _key = 0; _key < _len; _key++) {\n    formats[_key] = arguments[_key];\n  }\n\n  var combinedFormat = format(cascade(formats));\n  var instance = combinedFormat();\n  instance.Format = combinedFormat.Format;\n  return instance;\n}; //\n// Export the cascade method for use in cli and other\n// combined formats that should not be assumed to be\n// singletons.\n//\n\n\nmodule.exports.cascade = cascade;"},"lineCount":71}},"error":null,"hash":"7d68e4ddc6dc381ab83207e3d3012b16","cacheData":{"env":{}}}